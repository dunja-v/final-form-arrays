!(function(e, r) {
  'object' == typeof exports && 'undefined' != typeof module
    ? r(exports)
    : 'function' == typeof define && define.amd
    ? define(['exports'], r)
    : r(((e = e || self)['final-form-arrays'] = {}))
})(this, function(e) {
  'use strict'
  function i() {
    return (i =
      Object.assign ||
      function(e) {
        for (var r = 1; r < arguments.length; r++) {
          var n = arguments[r]
          for (var t in n)
            Object.prototype.hasOwnProperty.call(n, t) && (e[t] = n[t])
        }
        return e
      }).apply(this, arguments)
  }
  function h(e, r, n, t) {
    ;(n[t] = i({}, e[r], {
      name: t,
      change: e[t] && e[t].change,
      blur: e[t] && e[t].blur,
      focus: e[t] && e[t].focus,
      lastFieldState: void 0
    })),
      n[t].change || delete n[t].change,
      n[t].blur || delete n[t].blur,
      n[t].focus || delete n[t].focus
  }
  function g(e) {
    return e.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
  }
  function a(e, i, r) {
    var a = e[0],
      f = e[1],
      n = e[2]
    ;(0, r.changeValue)(i, a, function(e) {
      var r = [].concat(e || [])
      return r.splice(f, 0, n), r
    })
    var c = new RegExp('^' + g(a) + '\\[(\\d+)\\](.*)'),
      u = {}
    Object.keys(i.fields).forEach(function(e) {
      var r = c.exec(e)
      if (r) {
        var n = Number(r[1])
        if (f <= n) {
          var t = a + '[' + (n + 1) + ']' + r[2]
          return void h(i.fields, e, u, t)
        }
      }
      u[e] = i.fields[e]
    }),
      (i.fields = u)
  }
  function f(e, f, r) {
    var n,
      c = e[0],
      u = e[1],
      t = r.changeValue,
      o = r.getIn,
      s = r.setIn
    t(f, c, function(e) {
      if (!e) return e
      if (Array.isArray(e) && 0 === e.length) return []
      var r = [].concat(e)
      return (n = r[u]), r.splice(u, 1), r
    })
    var l = new RegExp('^' + g(c) + '\\[(\\d+)\\](.*)'),
      v = {}
    return (
      Object.keys(f.fields).forEach(function(e) {
        var r = l.exec(e)
        if (r) {
          var n = Number(r[1])
          if (n === u) {
            if (e === c + '[' + u + ']') {
              var t = 'formState.submitErrors.' + c,
                i = o(f, t)
              Array.isArray(i) && (i.splice(u, 1), (f = s(f, t, i)))
            }
            return
          }
          if (u < n) {
            var a = c + '[' + (n - 1) + ']' + r[2]
            return void h(f.fields, e, v, a)
          }
        }
        v[e] = f.fields[e]
      }),
      (f.fields = v),
      n
    )
  }
  var r = {
    insert: a,
    concat: function(e, r, n) {
      var t = e[0],
        i = e[1]
      ;(0, n.changeValue)(r, t, function(e) {
        return e ? [].concat(e, i) : i
      })
    },
    move: function(e, a, r) {
      var f = e[0],
        c = e[1],
        u = e[2],
        n = r.changeValue
      if (c !== u) {
        n(a, f, function(e) {
          var r = [].concat(e || []),
            n = r[c]
          return r.splice(c, 1), r.splice(u, 0, n), r
        })
        var o,
          s,
          l,
          v = {},
          d = new RegExp('^' + g(f) + '\\[(\\d+)\\](.*)')
        ;(l = u < c ? ((o = u), (s = c), 1) : ((o = c), (s = u), -1)),
          Object.keys(a.fields).forEach(function(e) {
            var r = d.exec(e)
            if (r) {
              var n = Number(r[1])
              if (n === c) {
                var t = f + '[' + u + ']' + r[2]
                return void h(a.fields, e, v, t)
              }
              if (o <= n && n <= s) {
                var i = f + '[' + (n + l) + ']' + r[2]
                return void h(a.fields, e, v, i)
              }
            }
            v[e] = a.fields[e]
          }),
          (a.fields = v)
      }
    },
    pop: function(e, r, n) {
      var t = e[0],
        i = (0, n.getIn)(r.formState.values, t)
      return i && 0 < i.length ? f([t, i.length - 1], r, n) : void 0
    },
    push: function(e, r, n) {
      var t = e[0],
        i = e[1]
      ;(0, n.changeValue)(r, t, function(e) {
        return e ? [].concat(e, [i]) : [i]
      })
    },
    remove: f,
    removeBatch: function(e, a, r) {
      var f = e[0],
        i = e[1],
        n = r.changeValue
      if (0 === i.length) return []
      var c = [].concat(i)
      c.sort()
      for (var t = c.length - 1; 0 < t; t -= 1)
        c[t] === c[t - 1] && c.splice(t, 1)
      var u = []
      n(a, f, function(r) {
        if (
          ((u = i.map(function(e) {
            return r && r[e]
          })),
          !r)
        )
          return r
        for (var e = [].concat(r), n = c.length - 1; 0 <= n; n -= 1) {
          var t = c[n]
          e.splice(t, 1)
        }
        return 0 < e.length ? e : void 0
      })
      var o = new RegExp('^' + g(f) + '\\[(\\d+)\\](.*)'),
        s = {}
      return (
        Object.keys(a.fields).forEach(function(e) {
          var r = o.exec(e)
          if (r) {
            var n = Number(r[1]),
              t = (function(e, r) {
                for (var n = 0, t = e.length - 1, i = 0; n <= t; ) {
                  if (e[(i = Math.floor((n + t) / 2))] === r) return i
                  e[i] > r ? (t = i - 1) : (n = i + 1)
                }
                return ~n
              })(c, n)
            if (0 <= t) return
            if (n > c[0]) {
              var i = f + '[' + (n - ~t) + ']' + r[2]
              return void h(a.fields, e, s, i)
            }
          }
          s[e] = a.fields[e]
        }),
        (a.fields = s),
        u
      )
    },
    shift: function(e, r, n) {
      var t = e[0]
      return f([t, 0], r, n)
    },
    swap: function(e, a, r) {
      var n = e[0],
        t = e[1],
        i = e[2],
        f = r.changeValue
      if (t !== i) {
        f(a, n, function(e) {
          var r = [].concat(e || []),
            n = r[t]
          return (r[t] = r[i]), (r[i] = n), r
        })
        var c = n + '[' + t + ']',
          u = n + '[' + i + ']',
          o = {}
        Object.keys(a.fields).forEach(function(e) {
          if (e.substring(0, c.length) === c) {
            var r = e.substring(c.length),
              n = u + r
            h(a.fields, e, o, n)
          } else if (e.substring(0, u.length) === u) {
            var t = e.substring(u.length),
              i = c + t
            h(a.fields, e, o, i)
          } else o[e] = a.fields[e]
        }),
          (a.fields = o)
      }
    },
    unshift: function(e, r, n) {
      var t = e[0],
        i = e[1]
      return a([t, 0, i], r, n)
    },
    update: function(e, r, n) {
      var t = e[0],
        i = e[1],
        a = e[2]
      ;(0, n.changeValue)(r, t, function(e) {
        var r = [].concat(e || [])
        return r.splice(i, 1, a), r
      })
    }
  }
  ;(e.default = r), Object.defineProperty(e, '__esModule', { value: !0 })
})
//# sourceMappingURL=final-form-arrays.umd.min.js.map
